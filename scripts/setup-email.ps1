# PowerShell script to set up email configuration

# Function to get input with a default value
function Get-InputWithDefault {
    param (
        [string]$prompt,
        [string]$default
    )
    
    $input = Read-Host "$prompt [$default]"
    if ([string]::IsNullOrWhiteSpace($input)) {
        return $default
    }
    return $input
}

# Display welcome message
Write-Host "=== Email Configuration Setup ===" -ForegroundColor Cyan
Write-Host "This script will help you configure your email settings for the contact form."
Write-Host "You'll need your SMTP server details to proceed." -ForegroundColor Yellow
Write-Host ""

# Get SMTP server details
$host_name = Get-InputWithDefault "SMTP Server Host (e.g., smtp.gmail.com)" "smtp.gmail.com"
$port = Get-InputWithDefault "SMTP Server Port (usually 587 for TLS, 465 for SSL)" "587"
$secure = Get-InputWithDefault "Use Secure Connection? (true for port 465, false for port 587)" "false"
$email = Get-InputWithDefault "Your Email Address" "info@phishsimulator.com"
$sender_name = Get-InputWithDefault "Sender Name" "Arabic Cybersecurity Website"

# Get password (masked input)
$password = Read-Host "Your Email Password or App Password" -AsSecureString
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($password)
$password_text = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)

# Update the config file
$config_file = "lib/email/config.ts"
$config_content = @"
// Email configuration for the contact form
// This file was auto-generated by scripts/setup-email.ps1

interface EmailConfig {
  // SMTP server host (e.g., smtp.gmail.com, smtp.office365.com)
  host: string;
  
  // SMTP server port (usually 587 for TLS, 465 for SSL)
  port: number;
  
  // Whether to use secure connection (usually true for port 465, false for port 587)
  secure: boolean;
  
  // Your email address (used as both sender and recipient)
  email: string;
  
  // Your email password or app password
  password: string;
  
  // The name to display as the sender
  senderName: string;
}

export const emailConfig: EmailConfig = {
  host: '$host_name',
  port: $port,
  secure: $secure.ToLower(),
  email: '$email',
  password: '$password_text',
  senderName: '$sender_name',
};

// Function to validate email configuration
export function isEmailConfigValid(): boolean {
  return (
    !!emailConfig.host &&
    !!emailConfig.port &&
    !!emailConfig.email &&
    !!emailConfig.password
  );
}
"@

# Write the config file
$config_content | Out-File -FilePath $config_file -Encoding utf8

Write-Host ""
Write-Host "Email configuration has been updated in $config_file" -ForegroundColor Green
Write-Host ""
Write-Host "Next steps:" -ForegroundColor Cyan
Write-Host "1. Run 'npm run setup-email' to install Nodemailer"
Write-Host "2. Uncomment the Nodemailer code in lib/email/sender.ts"
Write-Host "3. Restart your development server"
Write-Host ""
Write-Host "For more details, see README-EMAIL-CONFIG.md"
